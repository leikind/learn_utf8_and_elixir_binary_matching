defmodule EnterUnicodeTest do
  use ExUnit.Case, async: true

  # https://en.wikipedia.org/wiki/List_of_Unicode_characters#Greek_and_Coptic
  test "Unicode codepoints" do
    ?L |> IO.puts()
    ?Î» |> IO.puts()
    ?áƒš |> IO.puts()
    ?ğŸ’© |> IO.puts()
  end

  # Unicode versus unicode encodings

  test "codepoint of L vs L encoded" do
    ?L |> IO.puts()

    <<"L"::utf8>> |> IO.inspect(binaries: :as_binaries)
    <<"L"::utf16>> |> IO.inspect(binaries: :as_binaries)
    <<"L"::utf32>> |> IO.inspect(binaries: :as_binaries)
  end

  test "codepoint of Î» vs Î» encoded" do
    ?Î» |> IO.puts()

    <<"Î»"::utf8>> |> IO.inspect(binaries: :as_binaries)
    <<"Î»"::utf16>> |> IO.inspect(binaries: :as_binaries)
    <<"Î»"::utf32>> |> IO.inspect(binaries: :as_binaries)
  end

  test "extract the codepoint of Î» from UTF-16" do
    ?Î» |> IO.puts()

    lambda_utf16 = <<"Î»"::utf16>>

    lambda_utf16 |> IO.inspect()

    <<codepoint::integer()-size(16)>> = lambda_utf16

    codepoint |> IO.inspect()
  end

  test "codepoint of áƒš vs áƒš encoded" do
    ?áƒš |> IO.puts()

    <<"áƒš"::utf8>> |> IO.inspect(binaries: :as_binaries)
    <<"áƒš"::utf16>> |> IO.inspect(binaries: :as_binaries)
    <<"áƒš"::utf32>> |> IO.inspect(binaries: :as_binaries)
  end

  test "extract the codepoint of áƒš from UTF-16" do
    <<codepoint::integer()-size(16)>> = <<"áƒš"::utf16>>

    assert codepoint == ?áƒš
  end

  test "codepoint of ğŸ’© vs ğŸ’© encoded" do
    ?ğŸ’© |> IO.puts()

    <<"ğŸ’©"::utf8>> |> IO.inspect(binaries: :as_binaries)
    <<"ğŸ’©"::utf16>> |> IO.inspect(binaries: :as_binaries)
    <<"ğŸ’©"::utf32>> |> IO.inspect(binaries: :as_binaries)
  end

  test "extract the codepoint of ğŸ’© from UTF-32" do
    <<codepoint::integer()-size(32)>> = <<"ğŸ’©"::utf32>>

    assert codepoint == ?ğŸ’©
  end

  test "extract the codepoint of ğŸ’© from UTF-16" do
    # homework!
    # very easy after finishing this presentation and looking at this table: https://en.wikipedia.org/wiki/UTF-16#Examples
  end
end
